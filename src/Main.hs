{-# LANGUAGE ForeignFunctionInterface #-}
{-# LANGUAGE ScopedTypeVariables #-}

module Main where

import System.Environment (getArgs)
import Text.Parsec (parse)
import Parser (parseProgram)
import Foreign.C.String (withCString, peekCString)
import Codegen
import System.IO (writeFile)

main :: IO ()
main = do
    let inputFile = "input.txt"  -- –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–º—è –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    putStrLn "=== Refal LLVM Compiler ==="
    putStrLn $ "Processing file: " ++ inputFile
    putStrLn "=========================="
    
    content <- readFile inputFile
    case parse parseProgram inputFile content of
        Left err -> do
            putStrLn "\n‚ùå Parsing Error:"
            print err
        Right ast -> do
            putStrLn "\n‚úÖ Parsing successful!"
            
            -- –°–æ—Ö—Ä–∞–Ω—è–µ–º AST –≤ —Ñ–∞–π–ª
            let astOutput = inputFile ++ ".ast"
            writeFile astOutput (show ast)
            putStrLn $ "AST saved to: " ++ astOutput
            
            putStrLn "\nüî® Generating LLVM IR..."
            
            -- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è LLVM IR
            withCString "module" $ \moduleName -> do
                llvmModule <- llvmModuleCreateWithName moduleName
                
                -- –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
                addMainFunction llvmModule
                
                -- –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª
                result <- safeWriteBitcode llvmModule (inputFile ++ ".ll")
                
                -- –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏
                llvmDisposeModule llvmModule
                
                if result
                    then do
                        putStrLn "‚úÖ LLVM IR generation completed!"
                        putStrLn "\n‚ú® Compilation completed successfully!"
                        putStrLn "\nGenerated files:"
                        putStrLn $ "  üìÑ " ++ astOutput
                        putStrLn $ "  üìÑ " ++ inputFile ++ ".ll"
                    else do
                        putStrLn "‚ùå Failed to write LLVM bitcode"
                        putStrLn "Please check file permissions and path"
